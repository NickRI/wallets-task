// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NickRI/wallets-task/domain/services (interfaces: Wallet)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "github.com/NickRI/wallets-task/domain/entities"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockWallet is a mock of Wallet interface
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// AccountsList mocks base method
func (m *MockWallet) AccountsList(arg0 context.Context) (entities.Accounts, error) {
	ret := m.ctrl.Call(m, "AccountsList", arg0)
	ret0, _ := ret[0].(entities.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountsList indicates an expected call of AccountsList
func (mr *MockWalletMockRecorder) AccountsList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountsList", reflect.TypeOf((*MockWallet)(nil).AccountsList), arg0)
}

// LedgersList mocks base method
func (m *MockWallet) LedgersList(arg0 context.Context) (entities.Ledgers, error) {
	ret := m.ctrl.Call(m, "LedgersList", arg0)
	ret0, _ := ret[0].(entities.Ledgers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LedgersList indicates an expected call of LedgersList
func (mr *MockWalletMockRecorder) LedgersList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LedgersList", reflect.TypeOf((*MockWallet)(nil).LedgersList), arg0)
}

// Send mocks base method
func (m *MockWallet) Send(arg0 context.Context, arg1, arg2 string, arg3 decimal.Decimal) (*entities.Ledger, error) {
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entities.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockWalletMockRecorder) Send(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWallet)(nil).Send), arg0, arg1, arg2, arg3)
}
