// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NickRI/wallets-task/domain/repositories (interfaces: Accounts)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	entities "github.com/NickRI/wallets-task/domain/entities"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockAccounts is a mock of Accounts interface
type MockAccounts struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsMockRecorder
}

// MockAccountsMockRecorder is the mock recorder for MockAccounts
type MockAccountsMockRecorder struct {
	mock *MockAccounts
}

// NewMockAccounts creates a new mock instance
func NewMockAccounts(ctrl *gomock.Controller) *MockAccounts {
	mock := &MockAccounts{ctrl: ctrl}
	mock.recorder = &MockAccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccounts) EXPECT() *MockAccountsMockRecorder {
	return m.recorder
}

// GetByNameTx mocks base method
func (m *MockAccounts) GetByNameTx(arg0 *sql.Tx, arg1 context.Context, arg2 entities.AccountId) (*entities.Account, error) {
	ret := m.ctrl.Call(m, "GetByNameTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameTx indicates an expected call of GetByNameTx
func (mr *MockAccountsMockRecorder) GetByNameTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameTx", reflect.TypeOf((*MockAccounts)(nil).GetByNameTx), arg0, arg1, arg2)
}

// List mocks base method
func (m *MockAccounts) List(arg0 context.Context) (entities.Accounts, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(entities.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAccountsMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccounts)(nil).List), arg0)
}

// LockTx mocks base method
func (m *MockAccounts) LockTx(arg0 *sql.Tx, arg1 context.Context) error {
	ret := m.ctrl.Call(m, "LockTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockTx indicates an expected call of LockTx
func (mr *MockAccountsMockRecorder) LockTx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTx", reflect.TypeOf((*MockAccounts)(nil).LockTx), arg0, arg1)
}

// UpdateBalanceTx mocks base method
func (m *MockAccounts) UpdateBalanceTx(arg0 *sql.Tx, arg1 context.Context, arg2 *entities.Account, arg3 decimal.Decimal) error {
	ret := m.ctrl.Call(m, "UpdateBalanceTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTx indicates an expected call of UpdateBalanceTx
func (mr *MockAccountsMockRecorder) UpdateBalanceTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTx", reflect.TypeOf((*MockAccounts)(nil).UpdateBalanceTx), arg0, arg1, arg2, arg3)
}
